#!/usr/bin/env python3

import yaml
import textwrap
from collections import OrderedDict

argument_lengths = {
    'word': 4,
    'hword': 2,
    'byte': 1,
    'address': 4
}

def generate_c(data):
    lengths = {
        1: 'ARG_BYTE',
	2: 'ARG_HWORD',
	4: 'ARG_WORD'
    }

    commands = []
    functions = []
    
    with open('src/commands.h', 'w') as h, open('src/commands.c', 'w') as c:
        for command in data:
            name = command['name']
            args = command['arguments'] if 'arguments' in command else []

            length = len(args)
            arg_lengths = ', '.join(str(lengths[argument_lengths[arg['type']]]) for arg in args)
            commands.append('\t{{ command_{}, {}, {{ {} }} }}'.format(name, length, arg_lengths))
            functions.append('bool command_{}(u32 *);'.format(name))

        # Generate table
        print('#include "engine/types.h"', file=c)
        print('#include "commands.h"\n', file=c)
        print('\n'.join(functions), file=c)
        print(file=c)        
        print('const struct command command_table[COMMANDS_MAX] = {', file=c)
        print(',\n'.join(commands), file=c)
        print('};', file=c)

        # Generate header
        print('#ifndef COMMANDS_H', file=h)
        print('#define COMMANDS_H\n', file=h)
        print('#include "interpreter.h"\n', file=h)
        print('#define COMMANDS_MAX', len(commands), file=h)
        print('extern const struct command command_table[COMMANDS_MAX];', file=h)
        print('\n#endif /* COMMANDS_H */', file=h)

def generate_asm_macros(data):
    lengths = {
        1: '.byte',
        2: '.hword',
        4: '.word'
    }

    def get_arg(arg):
        return 'arg{}'.format(arg[0])

    with open('cutscript/cutscript.s', 'w') as s:
        for cmd, command in enumerate(data):
            name = command['name']
            args = command['arguments'] if 'arguments' in command else []
            description = command['description']
            doc_prefix = '@ '
            docstring = description.strip().split('\n')

            print('\n'.join(doc_prefix + line for line in docstring), file=s)
            print('.macro cs_{} {}'.format(name, ', '.join(a['name'] for a in args)), file=s)
            print('.byte', cmd, file=s)
            for arg in args:
                length = argument_lengths[arg['type']]
                print('{} \{}'.format(lengths[length], arg['name']), file=s)
            print('.endm\n', file=s)

def noramlize(data):
    for command in data:
        if not 'arguments' in command: command['arguments'] = []

        if 'category' not in command:
            print('Command', command['name'], 'missing category')
            quit(1)

        for argument in command['arguments']:
            if 'name' not in argument:
                print('Command', command['name'], 'missing argument name')
                quit(1)

            if 'description' not in argument:
                print('Command', command['name'], 'missing argument description')
                quit(1)

            if 'type' not in argument:
                print('Command', command['name'], 'missing argument type')
                quit(1)

            if argument['type'] not in argument_lengths:
                print('Command', command['name'], 'has invalid arg type:', argument['type'])
                quit(1)

    return data
            
def main():
    with open('src/commands.yml') as commands:
        data = yaml.load(commands, Loader=yaml.Loader)

    data = noramlize(data)
    generate_c(data)
    generate_asm_macros(data)

main()
