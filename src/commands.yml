# Priority control flow 

- name: nop
  category: 'control_flow'
  description: >
    nop

    Nothing

- name: end
  category: 'control_flow'  
  description: >
    end
    
    Terminates the script

#- name: callasm
#  arguments: [4]
#  description: >
#    (&u32 subroutine) -> void --> true
#    call an ASM subroutine, and continue script upon termination. 

- name: goto
  category: 'control_flow'  
  arguments: [4]
  description: >
    (&u32 label) -> [scr_cursor] --> true
    
    scr_cursor = label
    
  
#- name: call
#  arguments: [4]
#  description: >
#    (&u32 label) -> [saved_addr_stack], [scr_cursor] --> true
#    
#    saved_addr_stack.push(scr_cursor)
#    scr_cursor = label
    
  
#- name: b_if
#  arguments: [4, 4, 4, 4]
#  description: >
#    (&u32 p1, enum condition, &u32 p2, &u32 label) -> [scr_cursor] --> true
#    
#    if p1 condition p2 is true, scr_cursor = label
    

# Priority variable access 
- name: ow_var_load
  category: 'memory'  
  arguments: [2, 4]
  description: >
    (u16 var_ID, &u32 local_var.index) -> [local_var.index] --> true
    
    sets the value of a local_var.index to be the value
    of a variable
    
  
- name: ow_var_set
  category: 'memory'  
  arguments: [2, 2]
  description: >
    (u16 var_ID, u16 value) -> void --> true
    
    sets variable to the value of local_var.index.
    Note, only last two bytes are transfered.
    
  
- name: ow_var_access
  category: 'memory'
  arguments: [2, 2]
  description: >
    (u16 var_ID, &u32 local_var.index) -> [local_var.index] --> true
    
    sets local_var.index to be equal to the pointer to
    variable.
    
  
#- name: value_set
#  arguments: [4, 4, 4]
#  description: >
#    (&u32 addr_ptr, u32 size, &u32 destination) -> void --> true
#    
#    loads into a destination buffer of size bytes equal to the 
#    value of the address pointer given. Does not handle overflow.
    
  
#- name: mem_malloc
#  arguments: [4, 2]
#  description: >
#    (&u32 local_var.index, u16 size) -> [local_var.index] --> true
#    
#    mallocs size space, and puts ptr in local_var.index.
    
  
#- name: malloc_free
#  arguments: [4]
#  description: >
#    (&u32 local_var.index) -> [local_var.index] --> true
#    
#    free malloc memory given ptr in local_var.index.
    
  
# Priority graphic cmds OAMs 

- name: create_oam
  category: 'sprite'
  arguments: [4, 4, 4]
  description: >
    (&u32 image, &u32 pal, &u32 local_var.index) -> [local_var.index] --> true
    
    creates an OAM given pointers to pal and image. Put's it's ID in local var index
    
  
- name: oam_display
  category: 'sprite'
  arguments: [4, 1]
  description: >
    (&u32 local_var.index, u8 mode) -> void --> true
    
    Controls the display of a OAM with an ID stored in local_var.index. 
    Mode 0 = hide, Mode 1 = show
    
  
- name: oam_move
  category: 'sprite'
  arguments: [4, 1, 1]
  description: >
    (&u32 local_var.index, u8 x, u8 y) -> void --> true
    
    Change X, Y position of an OAM with id in local_var.index.
    
  
- name: oam_del
  category: 'sprite'
  arguments: [4]
  description: >
    (&u32 local_var.index) -> [local_var.index] --> true
    
    delete and free associated resources of an OAM with ID local_var.index
    
  
- name: oam_translate
  category: 'sprite'
  arguments: [4, 1, 1, 1]
  description: >
    (&u32 local_var.index, u8 speed, u8 x, u8 y) -> void --> true
    
    progressively translate an OAM with ID local_var.index at a speed to
    location X, Y by incrementing or decrementing
    
  
- name: oam_pal_update
  category: 'sprite'
  arguments: [4, 4]
  description: >
    (&u32 local_var.index, &u32 pal) -> void --> true
    
    update OAM pal to pal. Old pal is overwritten.
    
  
# Priority graphic cmds Backgrounds 

- name: bg_load
  category: 'background'  
  arguments: [1, 4, 4]
  description: >
    (u8 layer, &u32 tileset, &u32 tilemap) -> void --> true
    
    Uploads tileset and tilemap to background layer.
    
  
- name: BG_display
  category: 'background'  
  arguments: [1, 1]
  description: >
    (u8 ID, u8 mode) -> void --> true
    
    Controls the display of a OAM with an ID stored in local_var.index. 
    Mode 0 = hide, Mode 1 = show
    
  
- name: BG_move
  category: 'background'  
  arguments: [1, 1, 1]
  description: >
    (u8 ID, u8 x, u8 y) -> void --> true
    
    Change X, Y position of an BG.
    
  
- name: BG_del
  category: 'background'  
  arguments: [1]
  description: >
    (u8 ID) -> void --> true
    
    delete and free associated resources of a BG
    
  
- name: BG_translate
  category: 'background'  
  arguments: [1, 1, 2, 2]
  description: >
    (u8 ID, u8 speed, u16 x, u16 y) -> void --> true
    
    progressively translate an BG at a speed to
    location X, Y by incrementing or decrementing
    
  
- name: pal_load
  category: 'palette'  
  arguments: [4, 2, 2]
  description: >
    (u16 *pal, u16 offset, u16 size) -> void --> true
    
    update BG pal to pal. Old pal is overwritten.
    
    
- name: pal_fade
  category: 'palette'  
  arguments: [1, 1, 1, 2]
  description: >
    (s8 speed, u8 from, u8 to, u16 color) -> void --> true
        
    fade screen to a color at speed fast
        
  
#- name: wait
#  description: >
#    (void) -> void --> true
#    
#    wait for an effect
    
  
#- name: exit
#  arguments: [1]
#  description: >
#    (u8mode) -> void --> true
#    
#    terminates the script and runs a callback to return to the OW,
#    external continue script execution, return to routine call
    
  
# low priority graphic cmds OAMs 
- name: oam_rotate
  category: 'sprite'    
  arguments: [4, 1]
  description: >
    (&u32 local_var.index, u8 direction) -> void --> true
    rotate an oam in a direction
    
  
- name: oam_flip
  category: 'sprite'
  arguments: [4, 1]
  description: >
    (&u32 local_var.index, u8 mode) -> void --> true
    
    flip an oam on an axis
    
  
- name: oam_zoom
  category: 'sprite'
  arguments: [4, 1, 1]
  description: >
    (&u32 local_var.index, u8 scale_size, u8 scale_mode) -> void --> true
    
    change the scaling on an OAM
    

  
# low priority control flow 

#- name: do
#  description: >
#    (void) -> saved_addr.d1 --> true
#     
#    saved_addr.d1 = scr_cursor;
    
    
#- name: while
#  arguments: [4, 1, 4]
#  description: >  
#    (&u32 p1, enum condition, &u32 p2) -> void --> true
#    
#    verify (p1 condition p2) is true, if true redirect to #saved_addr_stack.pop .
#    p1 and p2 are pointers to data, condition is 0x0-0x5
#    0x00 = p1 != p2
#    0x01 = p1 == p2
#    0x02 = p1 > p2
#    0x03 = p1 <= p2
#    0x04 = p1 >=  p2
#    0x05 = p1 != p2
    
- name: pause
  category: 'control_flow'
  arguments: [4]
  description: >
    (u32 length) -> void --> true
    
    Wait length frames